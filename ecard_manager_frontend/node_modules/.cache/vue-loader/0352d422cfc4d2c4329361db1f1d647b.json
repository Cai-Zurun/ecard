{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/scroller/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/scroller/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi54cy1wbHVnaW4tcHVsbHVwLWNvbnRhaW5lciB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6UA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/scroller","sourcesContent":["<template>\r\n  <div :style=\"styles\">\r\n    <div class=\"xs-container\">\r\n      <slot></slot>\r\n      <slot name=\"pulldown\"></slot>\r\n      <slot name=\"pullup\"></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport objectAssign from 'object-assign'\r\nimport XScroll from 'vux-xscroll/build/cmd/xscroll.js'\r\nimport Pulldown from 'vux-xscroll/build/cmd/plugins/pulldown'\r\nimport Pullup from 'vux-xscroll/build/cmd/plugins/pullup'\r\n\r\nconst pulldownDefaultConfig = () => ({\r\n  content: 'Pull Down To Refresh',\r\n  height: 60,\r\n  autoRefresh: false,\r\n  downContent: 'Pull Down To Refresh',\r\n  upContent: 'Release To Refresh',\r\n  loadingContent: 'Loading...',\r\n  clsPrefix: 'xs-plugin-pulldown-'\r\n})\r\n\r\nconst pullupDefaultConfig = () => ({\r\n  content: 'Pull Up To Refresh',\r\n  pullUpHeight: 60,\r\n  height: 40,\r\n  autoRefresh: false,\r\n  downContent: 'Release To Refresh',\r\n  upContent: 'Pull Up To Refresh',\r\n  loadingContent: 'Loading...',\r\n  clsPrefix: 'xs-plugin-pullup-'\r\n})\r\n\r\nexport default {\r\n  name: 'scroller',\r\n  props: {\r\n    value: {\r\n      type: Object,\r\n      default: () => {\r\n        return {\r\n          pulldownStatus: '',\r\n          pullupStatus: ''\r\n        }\r\n      }\r\n    },\r\n    height: String,\r\n    lockX: Boolean,\r\n    lockY: Boolean,\r\n    scrollbarX: Boolean,\r\n    scrollbarY: Boolean,\r\n    bounce: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    useOriginScroll: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    useTransition: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    preventDefault: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    stopPropagation: Boolean,\r\n    boundryCheck: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    gpuAcceleration: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    usePulldown: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    usePullup: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    /**\r\n    * refer to: http://xscroll.github.io/node_modules/xscroll/doc/PullDown.html\r\n    */\r\n    pulldownConfig: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    pullupConfig: {\r\n      type: Object,\r\n      default () {\r\n        return {}\r\n      }\r\n    },\r\n    enableHorizontalSwiping: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    scrollBottomOffset: {\r\n      type: Number,\r\n      default: 0\r\n    }\r\n  },\r\n  methods: {\r\n    reset (scrollPosition, duration, easing) {\r\n      if (scrollPosition) {\r\n        if (typeof scrollPosition.left !== 'undefined') {\r\n          this._xscroll.scrollLeft(scrollPosition.left, duration, easing)\r\n        }\r\n        if (typeof scrollPosition.top !== 'undefined') {\r\n          this._xscroll.scrollTop(scrollPosition.top, duration, easing)\r\n        }\r\n      }\r\n      this._xscroll && this._xscroll.resetSize()\r\n    },\r\n    donePulldown () {\r\n      this.pulldown.reset(() => {\r\n        // repaint\r\n        this.reset()\r\n      })\r\n      this.currentValue.pulldownStatus = 'default'\r\n    },\r\n    disablePullup () {\r\n      // this._xscroll.unplug(this.pullup)\r\n      this.pullup.stop()\r\n      this.currentValue.pullupStatus = 'disabled'\r\n    },\r\n    enablePullup () {\r\n      this.currentValue.pullupStatus = 'default'\r\n      this.pullup.restart()\r\n    },\r\n    donePullup () {\r\n      this.pullup.complete()\r\n      this.reset()\r\n      this.currentValue.pullupStatus = 'default'\r\n    },\r\n    getStyles () {\r\n      let height = this.height\r\n      if (!this.height && (this.$el && !this.$el.style.height) && this.lockX) {\r\n        height = `${document.documentElement.clientHeight}px`\r\n        this.reset()\r\n      }\r\n\r\n      if (this.height && this.height.indexOf('-') === 0) {\r\n        height = `${document.documentElement.clientHeight + parseInt(this.height)}px`\r\n      }\r\n      this.styles = {\r\n        height: `${height}`\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    if (!this.value) {\r\n      this.currentValue = {\r\n        pulldownStatus: '',\r\n        pullupStatus: ''\r\n      }\r\n    } else {\r\n      this.currentValue = this.value\r\n    }\r\n    this.handleOrientationchange = () => {\r\n      setTimeout(() => {\r\n        this.reset()\r\n      }, 100)\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      currentValue: {},\r\n      styles: {}\r\n    }\r\n  },\r\n  watch: {\r\n    currentValue: {\r\n      handler: function (val) {\r\n        this.$emit('input', pure(val))\r\n      },\r\n      deep: true\r\n    },\r\n    height () {\r\n      this.getStyles()\r\n    },\r\n    value: {\r\n      handler: function (val) {\r\n        if (val.pullupStatus === 'default' && this.currentValue.pullupStatus !== 'default') {\r\n          this.donePullup()\r\n        }\r\n        if (val.pulldownStatus === 'default' && this.currentValue.pulldownStatus !== 'default') {\r\n          this.donePulldown()\r\n        }\r\n        if (val.pullupStatus === 'disabled' && this.currentValue.pullupStatus !== 'disabled') {\r\n          this.disablePullup()\r\n        }\r\n        if (val.pullupStatus === 'enabled' && this.currentValue.pullupStatus === 'disabled') {\r\n          this.enablePullup()\r\n        }\r\n      },\r\n      deep: true\r\n    }\r\n  },\r\n  mounted () {\r\n    this.uuid = Math.random().toString(36).substring(3, 8)\r\n    this.$nextTick(() => {\r\n      this.$el.setAttribute('id', `vux-scroller-${this.uuid}`)\r\n      let content = null\r\n      if (this.$slots.default) {\r\n        content = this.$slots.default[0].elm\r\n      }\r\n      if (!content) {\r\n        throw new Error('no content is found')\r\n      }\r\n\r\n      this._xscroll = new XScroll({\r\n        renderTo: `#vux-scroller-${this.uuid}`,\r\n        lockX: this.lockX,\r\n        lockY: this.lockY,\r\n        scrollbarX: this.scrollbarX,\r\n        scrollbarY: this.scrollbarY,\r\n        content: content,\r\n        bounce: this.bounce,\r\n        useOriginScroll: this.useOriginScroll,\r\n        useTransition: this.useTransition,\r\n        preventDefault: this.preventDefault,\r\n        boundryCheck: this.boundryCheck,\r\n        gpuAcceleration: this.gpuAcceleration,\r\n        stopPropagation: this.stopPropagation\r\n      })\r\n\r\n      this._xscroll.on('scroll', () => {\r\n        if (this._xscroll) {\r\n          const top = this._xscroll.getScrollTop()\r\n          this.$emit('on-scroll', {\r\n            top: top,\r\n            left: this._xscroll.getScrollLeft()\r\n          })\r\n          const containerHeight = this._xscroll.containerHeight\r\n          const scrollHeight = this._xscroll.height\r\n          if (top >= containerHeight - scrollHeight - this.scrollBottomOffset) {\r\n            this.$emit('on-scroll-bottom')\r\n          }\r\n        }\r\n      })\r\n\r\n      if (this.usePulldown) {\r\n        // if use slot=pulldown\r\n        let container = this.$slots.pulldown\r\n        let config = objectAssign(pulldownDefaultConfig(), this.pulldownConfig)\r\n        if (container) {\r\n          config.container = container[0].elm\r\n        }\r\n        this.pulldown = new Pulldown(config)\r\n        this._xscroll.plug(this.pulldown)\r\n        this.pulldown.on('loading', (e) => {\r\n          this.$emit('on-pulldown-loading', this.uuid)\r\n        })\r\n        this.pulldown.on('statuschange', (val) => {\r\n          this.currentValue.pulldownStatus = val.newVal\r\n        })\r\n      }\r\n\r\n      if (this.usePullup) {\r\n        // if use slot=pullup\r\n        let container = this.$slots.pullup\r\n        let config = objectAssign(pullupDefaultConfig(), this.pullupConfig)\r\n\r\n        if (container) {\r\n          config.container = container[0].elm\r\n        }\r\n        this.pullup = new Pullup(config)\r\n        this._xscroll.plug(this.pullup)\r\n        this.pullup.on('loading', (e) => {\r\n          this.$emit('on-pullup-loading', this.uuid)\r\n        })\r\n        this.pullup.on('statuschange', (val) => {\r\n          this.currentValue.pullupStatus = val.newVal\r\n        })\r\n      }\r\n\r\n      if (this.enableHorizontalSwiping) {\r\n        this._xscroll.on('panstart', (e) => {\r\n          if (e.direction === 2 || e.direction === 4) {\r\n            e.preventDefault()\r\n            if (this.scrollbarY) {\r\n              this._xscroll.userConfig.scrollbarY = false\r\n            }\r\n            this._xscroll.userConfig.lockY = true\r\n          }\r\n        })\r\n        this._xscroll.on('panend', () => {\r\n          if (this.scrollbarY) {\r\n            this._xscroll.userConfig.scrollbarY = true\r\n          }\r\n          this._xscroll.userConfig.lockY = false\r\n        })\r\n      }\r\n\r\n      this._xscroll.render()\r\n      window.addEventListener('orientationchange', this.handleOrientationchange, false)\r\n    })\r\n    this.getStyles()\r\n  },\r\n  updated () {\r\n    this.reset()\r\n  },\r\n  destroyed () {\r\n    if (this.pullup) {\r\n      this._xscroll.unplug(this.pullup)\r\n      this.pullup.pluginDestructor()\r\n    }\r\n    if (this.pulldown) {\r\n      this._xscroll.unplug(this.pulldown)\r\n      this.pulldown.pluginDestructor()\r\n    }\r\n    window.removeEventListener('orientationchange', this.handleOrientationchange, false)\r\n    this._xscroll.destroy()\r\n    this._xscroll = null\r\n  }\r\n}\r\n\r\nfunction pure (obj) {\r\n  return JSON.parse(JSON.stringify(obj))\r\n}\r\n</script>\r\n\r\n<style>\r\n.xs-plugin-pullup-container {\r\n  text-align: center;\r\n}\r\n</style>\r\n"]}]}