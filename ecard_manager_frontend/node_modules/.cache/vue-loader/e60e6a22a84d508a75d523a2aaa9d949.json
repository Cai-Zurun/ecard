{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/checklist/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/checklist/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/less-loader/dist/cjs.js","mtime":1635811351528},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAnLi4vLi4vc3R5bGVzL3dldWkvd2lkZ2V0L3dldWlfY2VsbC93ZXVpX2NlbGxfZ2xvYmFsJzsNCkBpbXBvcnQgJy4uLy4uL3N0eWxlcy93ZXVpL3dpZGdldC93ZXVpX2NlbGwvd2V1aV9jaGVjayc7DQpAaW1wb3J0ICcuLi8uLi9zdHlsZXMvd2V1aS9pY29uL3dldWlfaWNvbl9mb250JzsNCg0KLndldWktY2VsbHNfY2hlY2tib3ggLndldWktY2hlY2s6Y2hlY2tlZCArIC52dXgtY2hlY2tsaXN0LWljb24tY2hlY2tlZDpiZWZvcmUgew0KICBjb2xvcjogQGNoZWNrbGlzdC1pY29uLWFjdGl2ZS1jb2xvcjsNCn0NCg0KLndldWktY2VsbHNfY2hlY2tib3ggPiBsYWJlbCA+ICogew0KICBwb2ludGVyLWV2ZW50czogbm9uZTsNCn0NCi52dXgtY2hlY2tsaXN0LWRpc2FibGVkIC52dXgtY2hlY2tsaXN0LWljb24tY2hlY2tlZDpiZWZvcmUgew0KICBvcGFjaXR5OiAwLjU7DQp9DQoudnV4LWNoZWNrbGlzdC1sYWJlbC1sZWZ0IHsNCiAgZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlOw0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/checklist","sourcesContent":["<template>\r\n  <div :class=\"disabled ? 'vux-checklist-disabled' : ''\">\r\n    <div\r\n      v-show=\"title\"\r\n      class=\"weui-cells__title\">{{ title }}</div>\r\n    <slot name=\"after-title\"></slot>\r\n    <div class=\"weui-cells weui-cells_checkbox\">\r\n      <label\r\n        class=\"weui-cell weui-check_label\"\r\n        :class=\"{\r\n          'vux-checklist-label-left': labelPosition === 'left'\r\n        }\"\r\n        :for=\"`checkbox_${uuid}_${index}`\"\r\n        v-for=\"(one, index) in currentOptions\">\r\n        <div class=\"weui-cell__hd\">\r\n          <input type=\"checkbox\"\r\n            class=\"weui-check\"\r\n            :name=\"`vux-checkbox-${uuid}`\"\r\n            :value=\"getKey(one)\"\r\n            v-model=\"currentValue\"\r\n            :id=\"disabled ? '' : `checkbox_${uuid}_${index}`\"\r\n            :disabled=\"isDisabled(getKey(one))\">\r\n          <i class=\"weui-icon-checked vux-checklist-icon-checked\"></i>\r\n        </div>\r\n        <div class=\"weui-cell__bd\">\r\n          <p v-html=\"getValue(one)\"></p>\r\n          <inline-desc v-if=\"getInlineDesc(one)\">{{ getInlineDesc(one) }}</inline-desc>\r\n        </div>\r\n      </label>\r\n    </div>\r\n    <slot name=\"footer\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Base from '../../libs/base'\r\nimport Tip from '../tip'\r\nimport Icon from '../icon'\r\nimport InlineDesc from '../inline-desc'\r\nimport { getValue, getLabels, getKey, getInlineDesc } from './object-filter'\r\nimport shuffle from 'array-shuffle'\r\n\r\nexport default {\r\n  name: 'checklist',\r\n  components: {\r\n    Tip,\r\n    Icon,\r\n    InlineDesc\r\n  },\r\n  filters: {\r\n    getValue,\r\n    getKey\r\n  },\r\n  mixins: [Base],\r\n  props: {\r\n    name: String,\r\n    showError: Boolean,\r\n    title: String,\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    options: {\r\n      type: Array,\r\n      required: true\r\n    },\r\n    value: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    max: Number,\r\n    min: Number,\r\n    fillMode: Boolean,\r\n    randomOrder: Boolean,\r\n    checkDisabled: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    labelPosition: {\r\n      type: String,\r\n      default: 'right'\r\n    },\r\n    disabled: Boolean\r\n  },\r\n  data () {\r\n    return {\r\n      currentValue: [],\r\n      currentOptions: this.options,\r\n      tempValue: '' // used only for radio mode\r\n    }\r\n  },\r\n  beforeUpdate () {\r\n    if (this.isRadio) {\r\n      const length = this.currentValue.length\r\n      if (length > 1) {\r\n        this.currentValue = [this.currentValue[length - 1]]\r\n      }\r\n      const val = pure(this.currentValue)\r\n      this.tempValue = val.length ? val[0] : ''\r\n    }\r\n  },\r\n  created () {\r\n    this.handleChangeEvent = true\r\n    if (this.value) {\r\n      this.currentValue = this.value\r\n      if (this.isRadio) {\r\n        this.tempValue = this.isRadio ? this.value[0] : this.value\r\n      }\r\n    }\r\n    if (this.randomOrder) {\r\n      this.currentOptions = shuffle(this.options)\r\n    } else {\r\n      this.currentOptions = this.options\r\n    }\r\n  },\r\n  methods: {\r\n    getValue,\r\n    getKey,\r\n    getInlineDesc,\r\n    getFullValue () {\r\n      const labels = getLabels(this.options, this.value)\r\n      return this.currentValue.map((one, index) => {\r\n        return {\r\n          value: one,\r\n          label: labels[index]\r\n        }\r\n      })\r\n    },\r\n    isDisabled (key) {\r\n      if (!this.checkDisabled) {\r\n        return false\r\n      }\r\n      if (this._max > 1) {\r\n        return this.currentValue.indexOf(key) === -1 && this.currentValue.length === this._max\r\n      }\r\n      return false\r\n    }\r\n  },\r\n  computed: {\r\n    isRadio () {\r\n      if (typeof this.max === 'undefined') {\r\n        return false\r\n      } else {\r\n        return this.max === 1\r\n      }\r\n    },\r\n    _total () {\r\n      return this.fillMode ? (this.options.length + 1) : this.options.length\r\n    },\r\n    _min () {\r\n      if (!this.required && !this.min) {\r\n        return 0\r\n      }\r\n      if (!this.required && this.min) {\r\n        return Math.min(this._total, this.min)\r\n      }\r\n      if (this.required) {\r\n        if (this.min) {\r\n          let max = Math.max(1, this.min)\r\n          return Math.min(this._total, max)\r\n        } else {\r\n          return 1\r\n        }\r\n      }\r\n    },\r\n    _max () {\r\n      if (!this.required && !this.max) {\r\n        return this._total\r\n      }\r\n      if (this.max) {\r\n        if (this.max > this._total) {\r\n          return this._total\r\n        }\r\n        return this.max\r\n      } else {\r\n        return this._total\r\n      }\r\n    },\r\n    valid () {\r\n      return this.currentValue.length >= this._min && this.currentValue.length <= this._max\r\n    }\r\n  },\r\n  watch: {\r\n    tempValue (val) {\r\n      const _val = val ? [val] : []\r\n      this.$emit('input', _val)\r\n      this.$emit('on-change', _val, getLabels(this.options, _val))\r\n    },\r\n    value (newVal) {\r\n      if (JSON.stringify(newVal) !== JSON.stringify(this.currentValue)) {\r\n        this.currentValue = newVal\r\n      }\r\n    },\r\n    options (val) {\r\n      this.currentOptions = val\r\n    },\r\n    currentValue (newVal) {\r\n      const val = pure(newVal)\r\n\r\n      if (!this.isRadio) {\r\n        this.$emit('input', val)\r\n        this.$emit('on-change', val, getLabels(this.options, val))\r\n        let err = {}\r\n        if (this._min) {\r\n          if (this.required) {\r\n            if (this.currentValue.length < this._min) {\r\n              err = {\r\n                min: this._min\r\n              }\r\n            }\r\n          } else {\r\n            if (this.currentValue.length && this.currentValue.length < this._min) {\r\n              err = {\r\n                min: this._min\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (!this.valid && this.dirty && Object.keys(err).length) {\r\n          this.$emit('on-error', err)\r\n        } else {\r\n          this.$emit('on-clear-error')\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction pure (obj) {\r\n  return JSON.parse(JSON.stringify(obj))\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\r\n@import '../../styles/weui/widget/weui_cell/weui_check';\r\n@import '../../styles/weui/icon/weui_icon_font';\r\n\r\n.weui-cells_checkbox .weui-check:checked + .vux-checklist-icon-checked:before {\r\n  color: @checklist-icon-active-color;\r\n}\r\n\r\n.weui-cells_checkbox > label > * {\r\n  pointer-events: none;\r\n}\r\n.vux-checklist-disabled .vux-checklist-icon-checked:before {\r\n  opacity: 0.5;\r\n}\r\n.vux-checklist-label-left {\r\n  flex-direction: row-reverse;\r\n}\r\n</style>\r\n"]}]}