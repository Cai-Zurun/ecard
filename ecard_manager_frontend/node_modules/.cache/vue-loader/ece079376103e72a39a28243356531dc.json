{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/datetime/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/datetime/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/less-loader/dist/cjs.js","mtime":1635811351528},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAnLi9zdHlsZS5sZXNzJzsNCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8VA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/datetime","sourcesContent":["<template>\r\n  <a\r\n    class=\"vux-datetime weui-cell\"\r\n    :class=\"{'weui-cell_access': !readonly}\"\r\n    :data-cancel-text=\"$t('cancel_text')\"\r\n    :data-confirm-text=\"$t('confirm_text')\"\r\n    href=\"javascript:\">\r\n    <slot>\r\n      <div>\r\n        <slot name=\"title\">\r\n          <p\r\n            :style=\"styles\"\r\n            :class=\"labelClass\"\r\n            v-html=\"title\"></p>\r\n        </slot>\r\n        <inline-desc v-if=\"inlineDesc\">{{ inlineDesc }}</inline-desc>\r\n      </div>\r\n      <div\r\n        class=\"weui-cell__ft vux-cell-primary vux-datetime-value\"\r\n        :style=\"{\r\n          textAlign: valueTextAlign\r\n        }\">\r\n        <span\r\n          class=\"vux-cell-placeholder\"\r\n          v-if=\"!currentValue && placeholder\">{{ placeholder }}</span>\r\n        <span\r\n          class=\"vux-cell-value\"\r\n          v-if=\"currentValue\">{{ displayFormat ? displayFormat(currentValue) : currentValue }}</span>\r\n        <icon\r\n          class=\"vux-input-icon\"\r\n          type=\"warn\"\r\n          v-show=\"!valid\"\r\n          :title=\"firstError\"></icon>\r\n      </div>\r\n    </slot>\r\n  </a>\r\n</template>\r\n\r\n<i18n>\r\ncancel_text:\r\n  en: cancel\r\n  zh-CN: 取消\r\nconfirm_text:\r\n  en: done\r\n  zh-CN: 确定\r\n</i18n>\r\n\r\n<script>\r\nimport Icon from '../icon'\r\nimport Picker from './datetimepicker'\r\nimport Group from '../group'\r\nimport InlineDesc from '../inline-desc'\r\nimport Uuid from '../../mixins/uuid'\r\nimport format from '../../tools/date/format'\r\n\r\nexport default {\r\n  name: 'datetime',\r\n  mixins: [Uuid],\r\n  components: {\r\n    Group,\r\n    InlineDesc,\r\n    Icon\r\n  },\r\n  props: {\r\n    format: {\r\n      type: String,\r\n      default: 'YYYY-MM-DD',\r\n      validator (val) {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV === 'development' && val && /A/.test(val) && val !== 'YYYY-MM-DD A') {\r\n          return console.error('[VUX] Datetime prop:format 使用 A 时只允许的值为： YYYY-MM-DD A')\r\n        }\r\n        return true\r\n      }\r\n    },\r\n    title: String,\r\n    value: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    inlineDesc: String,\r\n    placeholder: String,\r\n    minYear: Number,\r\n    maxYear: Number,\r\n    confirmText: String,\r\n    cancelText: String,\r\n    clearText: String,\r\n    yearRow: {\r\n      type: String,\r\n      default: '{value}'\r\n    },\r\n    monthRow: {\r\n      type: String,\r\n      default: '{value}'\r\n    },\r\n    dayRow: {\r\n      type: String,\r\n      default: '{value}'\r\n    },\r\n    hourRow: {\r\n      type: String,\r\n      default: '{value}'\r\n    },\r\n    minuteRow: {\r\n      type: String,\r\n      default: '{value}'\r\n    },\r\n    required: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    minHour: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    maxHour: {\r\n      type: Number,\r\n      default: 23\r\n    },\r\n    startDate: {\r\n      type: String,\r\n      validator (val) {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV === 'development' && val && val.length !== 10) {\r\n          console.error('[VUX] Datetime prop:start-date 必须为 YYYY-MM-DD 格式')\r\n        }\r\n        return val ? val.length === 10 : true\r\n      }\r\n    },\r\n    endDate: {\r\n      type: String,\r\n      validator (val) {\r\n        /* istanbul ignore if */\r\n        if (process.env.NODE_ENV === 'development' && val && val.length !== 10) {\r\n          console.error('[VUX] Datetime prop:end-date 必须为 YYYY-MM-DD 格式')\r\n        }\r\n        return val ? val.length === 10 : true\r\n      }\r\n    },\r\n    valueTextAlign: String,\r\n    displayFormat: Function,\r\n    readonly: Boolean,\r\n    hourList: Array,\r\n    minuteList: Array,\r\n    show: Boolean,\r\n    defaultSelectedValue: String,\r\n    computeHoursFunction: Function,\r\n    computeDaysFunction: Function,\r\n    orderMap: Object\r\n  },\r\n  created () {\r\n    this.isFirstSetValue = false\r\n    this.currentValue = this.value\r\n  },\r\n  data () {\r\n    return {\r\n      currentShow: false,\r\n      currentValue: null,\r\n      valid: true,\r\n      errors: {}\r\n    }\r\n  },\r\n  mounted () {\r\n    const uuid = this.uuid\r\n    this.$el.setAttribute('id', `vux-datetime-${uuid}`)\r\n    if (!this.readonly) {\r\n      this.$nextTick(() => {\r\n        this.render()\r\n\r\n        if (this.show) {\r\n          this.$nextTick(() => {\r\n            this.picker && this.picker.show(this.currentValue)\r\n          })\r\n        }\r\n      })\r\n    }\r\n  },\r\n  computed: {\r\n    styles () {\r\n      if (!this.$parent) {\r\n        return {}\r\n      }\r\n      return {\r\n        width: this.$parent.labelWidth,\r\n        textAlign: this.$parent.labelAlign,\r\n        marginRight: this.$parent.labelMarginRight\r\n      }\r\n    },\r\n    pickerOptions () {\r\n      const _this = this\r\n      const options = {\r\n        trigger: '#vux-datetime-' + this.uuid,\r\n        format: this.format,\r\n        value: this.currentValue,\r\n        output: '.vux-datetime-value',\r\n        confirmText: _this.getButtonText('confirm'),\r\n        cancelText: _this.getButtonText('cancel'),\r\n        clearText: _this.clearText,\r\n        yearRow: this.yearRow,\r\n        monthRow: this.monthRow,\r\n        dayRow: this.dayRow,\r\n        hourRow: this.hourRow,\r\n        minuteRow: this.minuteRow,\r\n        minHour: this.minHour,\r\n        maxHour: this.maxHour,\r\n        startDate: this.startDate,\r\n        endDate: this.endDate,\r\n        hourList: this.hourList,\r\n        minuteList: this.minuteList,\r\n        defaultSelectedValue: this.defaultSelectedValue,\r\n        computeHoursFunction: this.computeHoursFunction,\r\n        computeDaysFunction: this.computeDaysFunction,\r\n        orderMap: this.orderMap || {},\r\n        onSelect (type, val, wholeValue) {\r\n          if (_this.picker && _this.picker.config.renderInline) {\r\n            _this.$emit('input', wholeValue)\r\n            _this.$emit('on-change', wholeValue)\r\n          }\r\n        },\r\n        onConfirm (value) {\r\n          _this.currentValue = value\r\n        },\r\n        onClear (value) {\r\n          _this.$emit('on-clear', value)\r\n        },\r\n        onHide (type) {\r\n          _this.currentShow = false\r\n          _this.$emit('update:show', false)\r\n          _this.validate()\r\n          _this.$emit('on-hide', type)\r\n          if (type === 'cancel') {\r\n            _this.$emit('on-cancel')\r\n          }\r\n          if (type === 'confirm') {\r\n            setTimeout(() => {\r\n              _this.$nextTick(() => {\r\n                _this.$emit('on-confirm', _this.value)\r\n              })\r\n            })\r\n          }\r\n        },\r\n        onShow () {\r\n          _this.currentShow = true\r\n          _this.$emit('update:show', true)\r\n          _this.$emit('on-show')\r\n        }\r\n      }\r\n      if (this.minYear) {\r\n        options.minYear = this.minYear\r\n      }\r\n      if (this.maxYear) {\r\n        options.maxYear = this.maxYear\r\n      }\r\n      return options\r\n    },\r\n    firstError () {\r\n      let key = Object.keys(this.errors)[0]\r\n      return this.errors[key]\r\n    },\r\n    labelClass () {\r\n      if (!this.$parent) {\r\n        return {}\r\n      }\r\n      return {\r\n        'vux-cell-justify': this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    getButtonText (type) {\r\n      if (type === 'cancel' && this.cancelText) {\r\n        return this.cancelText\r\n      } else if (type === 'confirm' && this.confirmText) {\r\n        return this.confirmText\r\n      }\r\n      return this.$el.getAttribute(`data-${type}-text`)\r\n    },\r\n    render () {\r\n      this.$nextTick(() => {\r\n        this.picker && this.picker.destroy()\r\n        this.picker = new Picker(this.pickerOptions)\r\n      })\r\n    },\r\n    validate () {\r\n      if (!this.currentValue && this.required) {\r\n        this.valid = false\r\n        this.errors.required = '必填'\r\n        return\r\n      }\r\n      this.valid = true\r\n      this.errors = {}\r\n    }\r\n  },\r\n  watch: {\r\n    readonly (val) {\r\n      if (val) {\r\n        this.picker && this.picker.destroy()\r\n      } else {\r\n        this.render()\r\n      }\r\n    },\r\n    show (val) {\r\n      if (val === this.currentShow) return\r\n      if (val) {\r\n        this.picker && this.picker.show(this.currentValue)\r\n      } else {\r\n        this.picker && this.picker.hide(this.currentValue)\r\n      }\r\n    },\r\n    currentValue (val, oldVal) {\r\n      this.$emit('input', val)\r\n      if (!this.isFirstSetValue) {\r\n        this.isFirstSetValue = true\r\n        oldVal && this.$emit('on-change', val)\r\n      } else {\r\n        this.$emit('on-change', val)\r\n      }\r\n      this.validate()\r\n    },\r\n    startDate () {\r\n      this.render()\r\n    },\r\n    endDate () {\r\n      this.render()\r\n    },\r\n    format (val) {\r\n      if (this.currentValue) {\r\n        this.currentValue = format(this.currentValue, val)\r\n      }\r\n      this.render()\r\n    },\r\n    value (val) {\r\n      // do not force render when renderInline is true\r\n      if (this.readonly || (this.picker && this.picker.config.renderInline)) {\r\n        this.currentValue = val\r\n        return\r\n      }\r\n      if (this.currentValue !== val) {\r\n        this.currentValue = val\r\n        this.render()\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    this.picker && this.picker.destroy()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import './style.less';\r\n</style>\r\n"]}]}