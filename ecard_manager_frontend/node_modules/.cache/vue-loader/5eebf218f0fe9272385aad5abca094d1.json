{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/checker/checker-item.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/checker/checker-item.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/less-loader/dist/cjs.js","mtime":1635811351528},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICcuLi8uLi9zdHlsZXMvdGFwLmxlc3MnOw0K"},{"version":3,"sources":["checker-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA","file":"checker-item.vue","sourceRoot":"node_modules/vux/src/components/checker","sourcesContent":["<template>\r\n  <div class=\"vux-checker-item\" :class=\"classNames\" @click=\"select\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'checker-item',\r\n  props: {\r\n    value: {\r\n      type: [String, Number, Object],\r\n      required: true\r\n    },\r\n    disabled: Boolean\r\n  },\r\n  watch: {\r\n    disabled (val) {\r\n      if (val && this.$parent.type === 'radio' && this.value === this.$parent.currentValue) {\r\n        this.$parent.currentValue = ''\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    classNames () {\r\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\r\n      const names = {\r\n        'vux-tap-active': !this.disabled\r\n      }\r\n\r\n      if (this.$parent.defaultItemClass) {\r\n        names[this.$parent.defaultItemClass] = true\r\n      }\r\n\r\n      if (this.$parent.selectedItemClass) {\r\n        let selected = false\r\n        if (this.$parent.type === 'radio') {\r\n          if (isSimpleValue && this.$parent.currentValue === this.value) {\r\n            selected = true\r\n          } else if (typeof this.value === 'object' && isEqual(this.$parent.currentValue, this.value)) {\r\n            selected = true\r\n          }\r\n        } else {\r\n          if (typeof this.value === 'string') {\r\n            if (this.$parent.currentValue.indexOf(this.value) > -1) {\r\n              selected = true\r\n            }\r\n          } else if (this.$parent.currentValue && this.$parent.currentValue.length) {\r\n            const match = this.$parent.currentValue.filter(one => {\r\n              return isEqual(one, this.value)\r\n            })\r\n            selected = match.length > 0\r\n          }\r\n        }\r\n        names[this.$parent.selectedItemClass] = selected\r\n      }\r\n\r\n      if (this.$parent.disabledItemClass) {\r\n        names[this.$parent.disabledItemClass] = this.disabled\r\n      }\r\n\r\n      return names\r\n    }\r\n  },\r\n  methods: {\r\n    select () {\r\n      if (this.$parent.type === 'radio') {\r\n        this.selectRadio()\r\n      } else {\r\n        this.selectCheckbox()\r\n      }\r\n    },\r\n    selectRadio () {\r\n      if (!this.disabled) {\r\n        if (this.$parent.currentValue === this.value) {\r\n          if (!this.$parent.radioRequired) {\r\n            this.$parent.currentValue = ''\r\n          }\r\n        } else {\r\n          this.$parent.currentValue = this.value\r\n        }\r\n      }\r\n      this.$emit('on-item-click', this.value, this.disabled)\r\n    },\r\n    selectCheckbox () {\r\n      if (!this.$parent.currentValue || this.$parent.currentValue === null) {\r\n        this.$parent.currentValue = []\r\n      }\r\n      const isSimpleValue = typeof this.value === 'string' || typeof this.value === 'number'\r\n      if (!this.disabled) {\r\n        let index = -1\r\n        if (isSimpleValue) {\r\n          index = this.$parent.currentValue.indexOf(this.value)\r\n        } else {\r\n          index = this.$parent.currentValue.map(one => JSON.stringify(one)).indexOf(JSON.stringify(this.value))\r\n        }\r\n        if (index > -1) {\r\n          this.$parent.currentValue.splice(index, 1)\r\n        } else {\r\n          if (!this.$parent.max || (this.$parent.max && (this.$parent.currentValue !== null && this.$parent.currentValue.length < this.$parent.max))) {\r\n            if (!this.$parent.currentValue || !this.$parent.currentValue.length) {\r\n              this.$parent.currentValue = []\r\n            }\r\n            this.$parent.currentValue.push(this.value)\r\n          }\r\n        }\r\n      }\r\n      this.$emit('on-item-click', this.value, this.disabled)\r\n    }\r\n  }\r\n}\r\n\r\nfunction isEqual (obj1, obj2) {\r\n  return JSON.stringify(obj1) === JSON.stringify(obj2)\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import '../../styles/tap.less';\r\n</style>\r\n"]}]}