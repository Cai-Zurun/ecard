{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/x-switch/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/x-switch/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/less-loader/dist/cjs.js","mtime":1635811351528},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KQGltcG9ydCAnLi4vaW5saW5lLXgtc3dpdGNoL3N0eWxlLmxlc3MnOw0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/x-switch","sourcesContent":["<template>\r\n  <div class=\"vux-x-switch weui-cell weui-cell_switch\">\r\n    <div class=\"weui-cell__bd\">\r\n      <label class=\"weui-label\" :style=\"labelStyle\" :class=\"labelClass\" v-html=\"title\"></label>\r\n      <inline-desc v-if=\"inlineDesc\">{{ inlineDesc }}</inline-desc>\r\n    </div>\r\n    <div class=\"weui-cell__ft\">\r\n      <input class=\"weui-switch\" type=\"checkbox\" :disabled=\"disabled\" v-model=\"currentValue\" />\r\n      <div v-if=\"preventDefault\" class=\"vux-x-switch-overlay\" @click=\"onClick\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport InlineDesc from '../inline-desc'\r\nimport cleanStyle from '../../libs/clean-style'\r\n\r\nexport default {\r\n  name: 'x-switch',\r\n  components: {\r\n    InlineDesc\r\n  },\r\n  computed: {\r\n    parent () {\r\n      const {$parent} = this\r\n      return $parent || {}\r\n    },\r\n    labelStyle () {\r\n      let isHTML = /<\\/?[^>]*>/.test(this.title)\r\n      let width = Math.min(isHTML ? 5 : (this.title.length + 1), 14) + 'em'\r\n      return cleanStyle({\r\n        display: 'block',\r\n        width: this.parent.labelWidth || width,\r\n        textAlign: this.parent.labelAlign\r\n      })\r\n    },\r\n    labelClass () {\r\n      return {\r\n        'vux-cell-justify': this.parent.labelAlign === 'justify'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    onClick () {\r\n      this.$emit('on-click', !this.currentValue, this.currentValue)\r\n    },\r\n    toBoolean (val) {\r\n      if (!this.valueMap) {\r\n        return val\r\n      } else {\r\n        const index = this.valueMap.indexOf(val)\r\n        return index === 1\r\n      }\r\n    },\r\n    toRaw (val) {\r\n      if (!this.valueMap) {\r\n        return val\r\n      } else {\r\n        return this.valueMap[val ? 1 : 0]\r\n      }\r\n    }\r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    disabled: Boolean,\r\n    value: {\r\n      type: [Boolean, String, Number],\r\n      default: false\r\n    },\r\n    inlineDesc: [String, Boolean, Number],\r\n    preventDefault: Boolean,\r\n    valueMap: {\r\n      type: Array,\r\n      default: () => ([false, true])\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      currentValue: this.toBoolean(this.value)\r\n    }\r\n  },\r\n  watch: {\r\n    currentValue (val) {\r\n      const rawValue = this.toRaw(val)\r\n      this.$emit('input', rawValue)\r\n      this.$emit('on-change', rawValue)\r\n    },\r\n    value (val) {\r\n      this.currentValue = this.toBoolean(val)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import '../inline-x-switch/style.less';\r\n</style>\r\n\r\n"]}]}