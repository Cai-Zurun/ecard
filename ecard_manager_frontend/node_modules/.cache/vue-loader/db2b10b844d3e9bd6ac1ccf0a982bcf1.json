{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/picker/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/picker/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJy4vc2Nyb2xsZXIuY3NzJzsNCg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/picker","sourcesContent":["<template>\r\n  <div class=\"vux-picker\">\r\n    <flexbox :gutter=\"0\">\r\n      <flexbox-item :span=\"columnWidth && columnWidth[index]\" v-for=\"(one, index) in currentData\" :key=\"index\" style=\"margin-left:0;\">\r\n        <div class=\"vux-picker-item\" :id=\"`vux-picker-${uuid}-${index}`\"></div>\r\n      </flexbox-item>\r\n    </flexbox>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Scroller from './scroller'\r\nimport { Flexbox, FlexboxItem } from '../flexbox'\r\nimport Manager from './chain'\r\nimport value2name from '../../filters/value2name'\r\nimport isArray from '../../libs/is-array'\r\n\r\nexport default {\r\n  name: 'picker',\r\n  components: {\r\n    Flexbox,\r\n    FlexboxItem\r\n  },\r\n  created () {\r\n    if (this.columns !== 0) {\r\n      const length = this.columns\r\n      this.store = new Manager(this.data, length, this.fixedColumns || this.columns)\r\n      this.currentData = this.store.getColumns(this.value)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.uuid = Math.random().toString(36).substring(3, 8)\r\n    this.$nextTick(() => {\r\n      this.render(this.currentData, this.currentValue)\r\n    })\r\n  },\r\n  props: {\r\n    data: Array,\r\n    columns: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    fixedColumns: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n    value: Array,\r\n    itemClass: {\r\n      type: String,\r\n      default: 'scroller-item'\r\n    },\r\n    columnWidth: Array\r\n  },\r\n  methods: {\r\n    getNameValues () {\r\n      return value2name(this.currentValue, this.data)\r\n    },\r\n    getId (i) {\r\n      return `#vux-picker-${this.uuid}-${i}`\r\n    },\r\n    render (data, value) {\r\n      this.count = this.currentData.length\r\n      const _this = this\r\n      if (!data || !data.length) {\r\n        return\r\n      }\r\n      let count = this.currentData.length\r\n      // set first item as value\r\n      if (value.length < count) {\r\n        for (let i = 0; i < count; i++) {\r\n          if (process.env.NODE_ENV === 'development' &&\r\n            typeof data[i][0] === 'undefined' &&\r\n            isArray(this.data) &&\r\n            this.data[0] &&\r\n            typeof this.data[0].value !== 'undefined' &&\r\n            !this.columns) {\r\n            console.error('[VUX error] 渲染出错，如果为联动模式，需要指定 columns(列数)')\r\n          }\r\n          this.$set(_this.currentValue, i, data[i][0].value || data[i][0])\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        /**\r\n        * Still don't know why this happens\r\n        */\r\n        if (!document.querySelector(_this.getId(i))) {\r\n          return\r\n        }\r\n\r\n        _this.scroller[i] && _this.scroller[i].destroy()\r\n        _this.scroller[i] = new Scroller(_this.getId(i), {\r\n          data: data[i],\r\n          defaultValue: value[i] || data[i][0].value,\r\n          itemClass: _this.itemClass,\r\n          onSelect (value) {\r\n            _this.$set(_this.currentValue, i, value)\r\n            if (!this.columns || (this.columns && _this.getValue().length === _this.store.count)) {\r\n              _this.$nextTick(() => {\r\n                _this.$emit('on-change', _this.getValue())\r\n              })\r\n            }\r\n            if (_this.columns !== 0) {\r\n              _this.renderChain(i + 1)\r\n            }\r\n          }\r\n        })\r\n        if (_this.currentValue) {\r\n          _this.scroller[i].select(value[i])\r\n        }\r\n      }\r\n    },\r\n    renderChain (i) {\r\n      if (!this.columns) {\r\n        return\r\n      }\r\n\r\n      // do not render for last scroller\r\n      if (i > this.count - 1) {\r\n        return\r\n      }\r\n\r\n      const _this = this\r\n      let ID = this.getId(i)\r\n      // destroy old one\r\n      this.scroller[i].destroy()\r\n      let list = this.store.getChildren(_this.getValue()[i - 1])\r\n      this.scroller[i] = new Scroller(ID, {\r\n        data: list,\r\n        itemClass: _this.item_class,\r\n        onSelect (value) {\r\n          _this.$set(_this.currentValue, i, value)\r\n          _this.$nextTick(() => {\r\n            _this.$emit('on-change', _this.getValue())\r\n          })\r\n          _this.renderChain(i + 1)\r\n        }\r\n      })\r\n      // list is Array(empty) as maybe\r\n      if (list.length) {\r\n        this.$set(this.currentValue, i, list[0].value)\r\n        this.renderChain(i + 1)\r\n      } else {\r\n        this.$set(this.currentValue, i, null)\r\n      }\r\n    },\r\n    getValue () {\r\n      let data = []\r\n      for (let i = 0; i < this.currentData.length; i++) {\r\n        if (this.scroller[i]) {\r\n          data.push(this.scroller[i].value)\r\n        } else {\r\n          return []\r\n        }\r\n      }\r\n      return data\r\n    },\r\n    emitValueChange (val) {\r\n      if (!this.columns || (this.columns && val.length === this.store.count)) {\r\n        this.$emit('on-change', val)\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      scroller: [],\r\n      count: 0,\r\n      uuid: '',\r\n      currentData: this.data,\r\n      currentValue: this.value\r\n    }\r\n  },\r\n  watch: {\r\n    value (val) {\r\n      if (JSON.stringify(val) !== JSON.stringify(this.currentValue)) {\r\n        this.currentValue = val\r\n      }\r\n    },\r\n    currentValue (val, oldVal) {\r\n      this.$emit('input', val)\r\n      // render all the scroller for chain datas\r\n      if (this.columns !== 0) {\r\n        if (val.length > 0) {\r\n          if (JSON.stringify(val) !== JSON.stringify(oldVal)) {\r\n            this.currentData = this.store.getColumns(val)\r\n            this.$nextTick(function () {\r\n              this.render(this.currentData, val)\r\n            })\r\n          }\r\n        } else {\r\n          this.render(this.currentData, [])\r\n        }\r\n      } else {\r\n        if (val.length) {\r\n          for (let i = 0; i < val.length; i++) {\r\n            if (this.scroller[i] && this.scroller[i].value !== val[i]) {\r\n              this.scroller[i].select(val[i])\r\n            }\r\n          }\r\n        } else {\r\n          this.render(this.currentData, [])\r\n        }\r\n      }\r\n    },\r\n    data (val) {\r\n      if (JSON.stringify(val) !== JSON.stringify(this.currentData)) {\r\n        this.currentData = val\r\n      }\r\n    },\r\n    currentData (newData) {\r\n      if (Object.prototype.toString.call(newData[0]) === '[object Array]') {\r\n        this.$nextTick(() => {\r\n          this.render(newData, this.currentValue)\r\n          // emit on-change after rerender\r\n          this.$nextTick(() => {\r\n            this.emitValueChange(this.getValue())\r\n\r\n            if (JSON.stringify(this.getValue()) !== JSON.stringify(this.currentValue)) {\r\n              if (!this.columns || (this.columns && this.getValue().length === this.store.count)) {\r\n                this.currentValue = this.getValue()\r\n              }\r\n            }\r\n          })\r\n        })\r\n      } else {\r\n        if (this.columns !== 0) {\r\n          if (!newData.length) {\r\n            return\r\n          }\r\n          const length = this.columns\r\n          this.store = new Manager(newData, length, this.fixedColumns || this.columns)\r\n          this.currentData = this.store.getColumns(this.currentValue)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy () {\r\n    for (let i = 0; i < this.count; i++) {\r\n      this.scroller[i] && this.scroller[i].destroy()\r\n      this.scroller[i] = null\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n@import './scroller.css';\r\n</style>\r\n\r\n"]}]}