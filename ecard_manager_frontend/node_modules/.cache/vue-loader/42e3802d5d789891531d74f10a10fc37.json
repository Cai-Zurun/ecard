{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/x-textarea/index.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/x-textarea/index.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/less-loader/dist/cjs.js","mtime":1635811351528},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQpAaW1wb3J0ICcuLi8uLi9zdHlsZXMvd2V1aS93aWRnZXQvd2V1aV9jZWxsL3dldWlfY2VsbF9nbG9iYWwnOw0KQGltcG9ydCAnLi4vLi4vc3R5bGVzL3dldWkvd2lkZ2V0L3dldWlfY2VsbC93ZXVpX2Zvcm0vd2V1aV9mb3JtX2NvbW1vbic7DQoNCi52dXgteC10ZXh0YXJlYS53ZXVpLWNlbGwgIHsNCiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7DQp9DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/vux/src/components/x-textarea","sourcesContent":["<template>\r\n  <div class=\"weui-cell vux-x-textarea\">\r\n    <div class=\"weui-cell__hd\">\r\n      <div :style=\"labelStyles\" v-if=\"hasRestrictedLabel\">\r\n        <slot name=\"restricted-label\"></slot>\r\n      </div>\r\n      <slot name=\"label\">\r\n        <label class=\"weui-label\" :class=\"labelClass\" :style=\"{width: $parent.labelWidth || (labelWidth + 'em'), textAlign: $parent.labelAlign, marginRight: $parent.labelMarginRight}\" v-if=\"title\" v-html=\"title\"></label>\r\n        <inline-desc v-if=\"inlineDesc\">{{inlineDesc}}</inline-desc>\r\n      </slot>\r\n    </div>\r\n    <div class=\"weui-cell__bd\">\r\n      <textarea\r\n        class=\"weui-textarea\"\r\n        :autocomplete=\"autocomplete\"\r\n        :autocapitalize=\"autocapitalize\"\r\n        :autocorrect=\"autocorrect\"\r\n        :spellcheck=\"spellcheck\"\r\n        :placeholder=\"placeholder\"\r\n        :readonly=\"readonly\"\r\n        :disabled=\"disabled\"\r\n        :name=\"name\"\r\n        :rows=\"rows\"\r\n        :cols=\"cols\"\r\n        v-model=\"currentValue\"\r\n        @focus=\"$emit('on-focus')\"\r\n        @blur=\"$emit('on-blur')\"\r\n        :style=\"textareaStyle\"\r\n        :maxlength=\"max\"\r\n        ref=\"textarea\"></textarea>\r\n      <div class=\"weui-textarea-counter\" v-show=\"showCounter && max\" @click=\"focus\">\r\n        <span>{{count}}</span>/{{max}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Base from '../../libs/base'\r\nimport InlineDesc from '../inline-desc'\r\nimport Autosize from 'autosize' // prop.autosize\r\n\r\nexport default {\r\n  name: 'x-textarea',\r\n  minxins: [Base],\r\n  mounted () {\r\n    if (this.$slots && this.$slots['restricted-label']) {\r\n      this.hasRestrictedLabel = true\r\n    }\r\n    // prop.autosize\r\n    this.$nextTick(() => {\r\n      if (this.autosize) {\r\n        this.bindAutosize()\r\n      }\r\n    })\r\n    // prop.autosize\r\n  },\r\n  components: {\r\n    InlineDesc\r\n  },\r\n  props: {\r\n    title: String,\r\n    inlineDesc: String,\r\n    showCounter: {\r\n      type: Boolean,\r\n      default: true\r\n    },\r\n    max: Number,\r\n    value: String,\r\n    name: String,\r\n    placeholder: String,\r\n    readonly: Boolean,\r\n    disabled: Boolean,\r\n    rows: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    cols: {\r\n      type: Number,\r\n      default: 30\r\n    },\r\n    height: Number,\r\n    // https://github.com/yisibl/blog/issues/3\r\n    autocomplete: {\r\n      type: String,\r\n      default: 'off'\r\n    },\r\n    autocapitalize: {\r\n      type: String,\r\n      default: 'off'\r\n    },\r\n    autocorrect: {\r\n      type: String,\r\n      default: 'off'\r\n    },\r\n    spellcheck: {\r\n      type: String,\r\n      default: 'false'\r\n    },\r\n    autosize: Boolean // prop.autosize\r\n  },\r\n  created () {\r\n    this.currentValue = this.value\r\n  },\r\n  watch: {\r\n    // prop.autosize\r\n    autosize (val) {\r\n      this.unbindAutosize()\r\n      if (val) {\r\n        this.bindAutosize()\r\n      }\r\n    },\r\n    // prop.autosize\r\n    value (val) {\r\n      this.currentValue = val\r\n    },\r\n    currentValue (newVal) {\r\n      if (this.max && newVal) {\r\n        if (newVal.length > this.max) {\r\n          let newLines = newVal.match(/\\n/g).length\r\n          this.currentValue = newVal.slice(0, this.max - newLines)\r\n          this.$nextTick(() => {\r\n            if (this.autosize) {\r\n              this.updateAutosize()\r\n            }\r\n          })\r\n        }\r\n      }\r\n      this.$emit('input', this.currentValue)\r\n      this.$emit('on-change', this.currentValue)\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      hasRestrictedLabel: false,\r\n      currentValue: ''\r\n    }\r\n  },\r\n  computed: {\r\n    count () {\r\n      const len = this.currentValue ? this.currentValue.length : 0\r\n      return len > this.max ? this.max : len\r\n    },\r\n    textareaStyle () {\r\n      if (this.height) {\r\n        return {\r\n          height: `${this.height}px`\r\n        }\r\n      }\r\n    },\r\n    labelStyles () {\r\n      const {$parent = {}} = this\r\n      return {\r\n        width: $parent.labelWidth || (this.labelWidth + 'em'),\r\n        textAlign: $parent.labelAlign,\r\n        marginRight: $parent.labelMarginRight\r\n      }\r\n    },\r\n    labelWidth () {\r\n      return this.title.replace(/[^x00-xff]/g, '00').length / 2 + 1\r\n    },\r\n    labelClass () {\r\n      if (!this.$parent) return {}\r\n      return {\r\n        'vux-cell-justify': this.$parent.labelAlign === 'justify' || this.$parent.$parent.labelAlign === 'justify'\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    updateAutosize () {\r\n      Autosize.update(this.$refs.textarea)\r\n    },\r\n    // prop.autosize\r\n    bindAutosize () {\r\n      Autosize(this.$refs.textarea)\r\n    },\r\n    unbindAutosize () {\r\n      Autosize.destroy(this.$refs.textarea)\r\n    },\r\n    // prop.autosize\r\n    focus () {\r\n      this.$refs.textarea.focus()\r\n    }\r\n  },\r\n  // prop.autosize\r\n  beforeDestroy () {\r\n    this.unbindAutosize()\r\n  }\r\n  // prop.autosize\r\n}\r\n</script>\r\n\r\n<style lang=\"less\">\r\n@import '../../styles/weui/widget/weui_cell/weui_cell_global';\r\n@import '../../styles/weui/widget/weui_cell/weui_form/weui_form_common';\r\n\r\n.vux-x-textarea.weui-cell  {\r\n  align-items: flex-start;\r\n}\r\n</style>\r\n"]}]}