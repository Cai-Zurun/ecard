{"remainingRequest":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/v-chart/v-chart.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vux/src/components/v-chart/v-chart.vue","mtime":1635777723566},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/css-loader/dist/cjs.js","mtime":1635231904892},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1635231911752},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/postcss-loader/src/index.js","mtime":1635231910975},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/cache-loader/dist/cjs.js","mtime":1635231739476},{"path":"/Users/zrun/vueSpace/ecard_manager_frontend/node_modules/vue-loader/lib/index.js","mtime":1635231911752}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoubm9zZWxlY3Qgew0KICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7IC8qIGlPUyBTYWZhcmkgKi8NCiAgICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAvKiBTYWZhcmkgKi8NCiAgICAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAvKiBLb25xdWVyb3IgSFRNTCAqLw0KICAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7IC8qIEZpcmVmb3ggKi8NCiAgICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lOyAvKiBJbnRlcm5ldCBFeHBsb3Jlci9FZGdlICovDQogICAgICAgICAgICB1c2VyLXNlbGVjdDogbm9uZTsgLyogTm9uLXByZWZpeGVkIHZlcnNpb24sIGN1cnJlbnRseQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZCBieSBDaHJvbWUgYW5kIE9wZXJhICovDQp9DQo="},{"version":3,"sources":["v-chart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"v-chart.vue","sourceRoot":"node_modules/vux/src/components/v-chart","sourcesContent":["<template lang=\"html\">\r\n  <div\r\n    :style=\"{\r\n      backgroundColor: backgroundColor,\r\n      width: width + 'px',\r\n      height: height + 'px'\r\n    }\"\r\n    @touchstart=\"onTouchstart\">\r\n    <canvas height=\"260\" class=\"noselect\" ref=\"chart\"></canvas>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n// const shapeMap = {\r\n//   point: ['circle', 'hollowCircle', 'rect'],\r\n//   line: ['line', 'smooth', 'dash'],\r\n//   area: ['area', 'smooth'],\r\n//   interval: ['rect'],\r\n//   polygon: ['polygon'],\r\n//   schema: ['candle']\r\n// }\r\n\r\nimport F2 from '@antv/f2'\r\n\r\nexport default {\r\n  props: {\r\n    width: Number,\r\n    height: Number,\r\n    backgroundColor: {\r\n      type: String,\r\n      default: '#fff'\r\n    },\r\n    data: {\r\n      type: Array\r\n    },\r\n    tooltip: {\r\n      type: Object\r\n    },\r\n    shape: {\r\n      type: String,\r\n      default: 'line'\r\n    },\r\n    preventRender: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    preventDefault: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      xField: '',\r\n      yField: '',\r\n      hasPoint: false,\r\n      pointStyle: {},\r\n\r\n      guideTags: [],\r\n\r\n      areaOptions: null,\r\n      lineOptions: null,\r\n      tooltipOptions: null,\r\n      legendOptions: null,\r\n\r\n      barOptions: null,\r\n\r\n      pieOptions: null,\r\n\r\n      guideOptions: null,\r\n\r\n      pointOptions: null,\r\n\r\n      xFieldOptions: {},\r\n      yFieldOptions: {},\r\n\r\n      guides: [],\r\n\r\n      seriesField: '',\r\n\r\n      xAxisOptions: null,\r\n      yAxisOptions: null,\r\n\r\n      autoAlignXAxis: undefined\r\n    }\r\n  },\r\n  computed: {\r\n    currentData () {\r\n      if (this.pieOptions) {\r\n        return this.data.slice().map(item => {\r\n          item.a = '1'\r\n          return item\r\n        })\r\n      }\r\n      return this.data\r\n    },\r\n    currentXFieldOptions (val) {\r\n      const defaultOptions = {\r\n        tickCount: 5\r\n      }\r\n      if (!this.barOptions) {\r\n        defaultOptions.range = [0, 1]\r\n      } else {\r\n        defaultOptions.tickCount = 0\r\n      }\r\n      // auto detect if is timeCat\r\n      if (!this.xFieldOptions) {\r\n        if (/\\d{4}-\\d{2}-\\d{2}/.test(this.data[0][this.xField])) {\r\n          return Object.assign({}, defaultOptions, {\r\n            type: 'timeCat',\r\n            tickCount: 3\r\n          })\r\n        } else {\r\n          return defaultOptions\r\n        }\r\n      }\r\n\r\n      return Object.assign({}, defaultOptions, this.xFieldOptions)\r\n    },\r\n    currentYFieldOptions (val) {\r\n      const defaultOptions = {\r\n        tickCount: 5\r\n      }\r\n      if (!val) {\r\n        return defaultOptions\r\n      }\r\n\r\n      return Object.assign({}, defaultOptions, this.yFieldOptions)\r\n    }\r\n  },\r\n  watch: {\r\n    data () {\r\n      this.changeData(this.data)\r\n    }\r\n  },\r\n  methods: {\r\n    onTouchstart (e) {\r\n      this.preventDefault && e.preventDefault()\r\n    },\r\n    set (name, options) {\r\n      this[`${name}Options`] = options\r\n    },\r\n    changeData (data) {\r\n      this.chart && this.chart.changeData(data)\r\n    },\r\n    setField (axis, item) {\r\n      this[`${axis}Field`] = item\r\n    },\r\n    repaint () {\r\n      this.chart.repaint()\r\n    },\r\n    rerender () {\r\n      this.destroy()\r\n      this.render()\r\n    },\r\n    destroy () {\r\n      this.chart && this.chart.destroy()\r\n    },\r\n    addGuide (options) {\r\n      this.guides.push(options)\r\n    },\r\n    setScale (options) {\r\n      if (options.x) {\r\n        this.xFieldOptions = options.x\r\n      }\r\n      if (options.y) {\r\n        this.yFieldOptions = options.y\r\n      }\r\n    },\r\n    setAxis (options) {\r\n      if (options.x) {\r\n        this.xAxisOptions = options\r\n        if (typeof options.autoAlign !== 'undefined') {\r\n          this.autoAlignXAxis = options.autoAlign\r\n        }\r\n      }\r\n      if (options.y) {\r\n        this.yAxisOptions = options\r\n      }\r\n    },\r\n    buildColor (c) {\r\n      let color = c || ''\r\n      if (Array.isArray(c) && Array.isArray(c[0])) {\r\n        const ctx = this.$refs.chart.getContext('2d')\r\n        color = ctx.createLinearGradient(0, 0, window.innerWidth, 0)\r\n        c.forEach(c => {\r\n          color.addColorStop(c[0], c[1])\r\n        })\r\n      }\r\n      return color\r\n    },\r\n    setPie (options = {}) {\r\n      this.pieOptions = options\r\n    },\r\n    setBar (options = {}) {\r\n      this.barOptions = options\r\n    },\r\n    setLegend (options) {\r\n      this.legendOptions = options\r\n    },\r\n    setTooltip (options) {\r\n      this.tooltipOptions = options\r\n    },\r\n    setArea (options) {\r\n      this.areaOptions = options\r\n    },\r\n    setGuide (options) {\r\n      this.guideOptions = options\r\n    },\r\n    setLine (options) {\r\n      this.lineOptions = options\r\n    },\r\n    setPoint (options) {\r\n      this.pointOptions = options\r\n    },\r\n    buildPosition () {\r\n      return `${this.xField}*${this.yField}`\r\n    },\r\n    getFields () {\r\n      if (this.xField && this.yField) {\r\n        return\r\n      }\r\n\r\n      if (this.data && this.data.length) {\r\n        const keys = Object.keys(this.data[0])\r\n        if (keys.length >= 2) {\r\n          let indexes = [0, 1]\r\n          const type1 = typeof this.data[0][keys[0]]\r\n          const type2 = typeof this.data[0][keys[1]]\r\n          if (type1 === 'number' && type2 !== 'number') {\r\n            indexes = [1, 0]\r\n          } else if (type1 === 'string' && type2 === 'string' && keys[2] === 'value') {\r\n            indexes = [0, 2]\r\n          }\r\n          this.xField = keys[indexes[0]]\r\n          this.yField = keys[indexes[1]]\r\n        }\r\n      }\r\n    },\r\n    render () {\r\n      const _this = this\r\n      let autoAlignXAxis = this.autoAlignXAxis\r\n      if (this.barOptions) {\r\n        autoAlignXAxis = false\r\n      }\r\n      if (typeof autoAlignXAxis === 'undefined') {\r\n        autoAlignXAxis = true\r\n      }\r\n      const windowWidth = window.innerWidth\r\n      const windowHeight = window.innerHeight\r\n      const chart = new F2.Chart({\r\n        el: this.$refs.chart,\r\n        width: this.width || windowWidth,\r\n        height: this.height ? this.height : (windowWidth > windowHeight ? (windowHeight - 54) : windowWidth * 0.707),\r\n        pixelRatio: this.$devicePixelRatio || window.devicePixelRatio,\r\n        ...this.$attrs\r\n      })\r\n      if (this.preventRender) {\r\n        this.$emit('on-render', { chart })\r\n        return\r\n      }\r\n\r\n      if (!this.data || !this.data.length) {\r\n        return\r\n      }\r\n\r\n      this.getFields()\r\n\r\n      chart.source(this.currentData)\r\n\r\n      chart.scale(this.xField, this.currentXFieldOptions)\r\n      chart.scale(this.yField, this.currentYFieldOptions)\r\n\r\n      if (this.legendOptions) {\r\n        if (this.legendOptions.disabled) {\r\n          chart.legend(false)\r\n        } else {\r\n          chart.legend(this.legendOptions)\r\n        }\r\n      }\r\n\r\n      if (this.tooltipOptions) {\r\n        if (this.barOptions) {\r\n          this.tooltipOptions.showCrosshairs = false\r\n        }\r\n        if (!this.tooltipOptions.disabled) {\r\n          // handle show-value-in-legend\r\n          if (this.tooltipOptions.showValueInLegend) {\r\n            const customTooltip = {\r\n              custom: true, // 自定义 tooltip 内容框\r\n              onChange: function (obj) {\r\n                const legend = _this.chart.get('legendController').legends.top[0]\r\n                const tooltipItems = obj.items\r\n                const legendItems = legend.items\r\n                const map = {}\r\n                legendItems.map(item => {\r\n                  map[item.name] = JSON.parse(JSON.stringify(item))\r\n                })\r\n                tooltipItems.map(item => {\r\n                  const { name, value } = item\r\n                  if (map[name]) {\r\n                    map[name].value = value\r\n                  }\r\n                })\r\n                legend.setItems(Object.values(map))\r\n              },\r\n              onHide: function () {\r\n                const VChart = _this.chart\r\n                const legend = VChart.get('legendController').legends.top[0]\r\n                legend.setItems(VChart.getLegendItems().type)\r\n              }\r\n            }\r\n            this.tooltipOptions = {\r\n              ...this.tooltipOptions,\r\n              ...customTooltip\r\n            }\r\n          }\r\n          chart.tooltip(this.tooltipOptions)\r\n        } else {\r\n          chart.tooltip(false)\r\n        }\r\n      } else {\r\n        chart.tooltip({\r\n          showCrosshairs: !this.barOption\r\n        })\r\n      }\r\n\r\n      if (autoAlignXAxis) {\r\n        chart.axis(this.xField, {\r\n          label (text, index, total) {\r\n            const textCfg = {}\r\n            if (index === 0) {\r\n              textCfg.textAlign = 'left'\r\n            }\r\n            if (index === total - 1) {\r\n              textCfg.textAlign = 'right'\r\n            }\r\n            return textCfg\r\n          }\r\n        })\r\n      }\r\n\r\n      if (this.lineOptions) {\r\n        const { shape, adjust, size } = this.lineOptions\r\n        let seriesField = this.lineOptions.seriesField || ''\r\n        let colors = this.buildColor(this.lineOptions.colors)\r\n        let rs = chart.line().position(this.buildPosition()).shape(shape)\r\n\r\n        if (size) {\r\n          rs.size(size)\r\n        }\r\n\r\n        if (!seriesField && colors) {\r\n          rs.color(colors)\r\n        }\r\n        if (seriesField) {\r\n          if (colors && colors.length) {\r\n            rs.color(seriesField, colors)\r\n          } else {\r\n            rs.color(seriesField)\r\n          }\r\n        }\r\n        if (adjust) {\r\n          rs.adjust(adjust)\r\n        }\r\n      }\r\n\r\n      if (this.guides.length) {\r\n        this.guides.forEach(guide => {\r\n          chart.guide()[guide.type](guide.options)\r\n        })\r\n      }\r\n\r\n      if (this.areaOptions) {\r\n        const { adjust, seriesField } = this.areaOptions\r\n        let color = this.buildColor(this.areaOptions.colors)\r\n        let rs = chart.area().position(this.buildPosition()).shape(this.areaOptions.shape || '')\r\n        if (!seriesField && color) {\r\n          rs.color(color)\r\n        } else {\r\n          rs.color(seriesField || '', color)\r\n        }\r\n\r\n        if (adjust) {\r\n          rs.adjust(adjust)\r\n        }\r\n      }\r\n\r\n      if (this.barOptions) {\r\n        const { adjust, seriesField } = this.barOptions\r\n        let color = this.buildColor(this.barOptions.colors)\r\n        let rs = chart.interval().position(this.buildPosition())\r\n        if (!seriesField && color) {\r\n          rs.color(color)\r\n        } else {\r\n          rs.color(seriesField || '', color)\r\n        }\r\n\r\n        if (adjust) {\r\n          rs.adjust(adjust)\r\n        }\r\n      }\r\n\r\n      ['x', 'y'].forEach(axis => {\r\n        if (this[`${axis}AxisOptions`]) {\r\n          chart.axis(this[`${axis}Field`], this[`${axis}Field`].disabled ? false : this[`${axis}AxisOptions`])\r\n        }\r\n      })\r\n\r\n      if (this.pieOptions) {\r\n        chart.coord(this.pieOptions.coord, this.pieOptions)\r\n        chart.axis(false)\r\n        chart.interval()\r\n        .position('a*percent')\r\n        .color(this.pieOptions.seriesField, (this.pieOptions.colors && this.pieOptions.colors.length) ? this.pieOptions.colors : '')\r\n        .adjust('stack')\r\n        .style({\r\n          lineWidth: 1,\r\n          stroke: '#fff',\r\n          lineJoin: 'round',\r\n          lineCap: 'round'\r\n        })\r\n        .animate({\r\n          appear: {\r\n            duration: 1200,\r\n            easing: 'bounceOut'\r\n          }\r\n        })\r\n      }\r\n\r\n      if (this.pointOptions) {\r\n        const { seriesField, styles, shape, size, colors } = this.pointOptions\r\n        let rs = chart.point().position(this.buildPosition()).style(styles).shape(shape)\r\n\r\n        let color = this.buildColor(colors)\r\n        if (!seriesField && color) {\r\n          rs.color(color)\r\n        } else {\r\n          rs.color(seriesField || '', color)\r\n        }\r\n\r\n        if (!seriesField && size) {\r\n          rs.size(size)\r\n        } else {\r\n          rs.size(seriesField || '', size)\r\n        }\r\n      }\r\n\r\n      // 在渲染前执触发on-render使之可以做自定义设置\r\n      this.$emit('on-render', { chart })\r\n      chart.render()\r\n      this.chart = chart\r\n    }\r\n  },\r\n  async mounted () {\r\n    await this.$nextTick()\r\n    this.render()\r\n    window.addEventListener('resize', this.render)\r\n  },\r\n  beforeDestroy () {\r\n    window.removeEventListener('resize', this.render)\r\n    this.destroy()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n.noselect {\r\n  -webkit-touch-callout: none; /* iOS Safari */\r\n    -webkit-user-select: none; /* Safari */\r\n     -khtml-user-select: none; /* Konqueror HTML */\r\n       -moz-user-select: none; /* Firefox */\r\n        -ms-user-select: none; /* Internet Explorer/Edge */\r\n            user-select: none; /* Non-prefixed version, currently\r\n                                  supported by Chrome and Opera */\r\n}\r\n</style>\r\n"]}]}